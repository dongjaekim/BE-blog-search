plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.1.0'
	//querydsl 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'jacoco'
}

group = 'com.blogsearch'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = "1.5.3.Final"
	lombokMapstructBindingVersion = "0.2.0"
}

dependencies {

	//jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//javax-validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//webflux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//mapstruct
	implementation "org.mapstruct:mapstruct:$mapstructVersion"
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion"

	//swagger, bean-validation
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	//h2
	runtimeOnly 'com.h2database:h2'

	//Querydsl
	implementation 'com.querydsl:querydsl-jpa'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl" as Object
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false
	}

	def Qdomains = []

	for (qPattern in '**/QA'..'**/QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}

	def config = []
	config.add('**/global/config/*')

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [] + Qdomains + config )
				})
		)
	}
}
